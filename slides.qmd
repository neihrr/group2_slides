---
title: "Fetch, async/await"
format: revealjs
---

## Asynchronous vs. Synchronous JavaScript

- **Synchronous JavaScript**  
  Operations are performed one after the other.  
  Each line of code waits for the previous one.  
  Predictable, linear order.  
  Each task is completed before the next one starts.

- **Asynchronous JavaScript**  
  Allows multiple tasks to run independently of each other.  
  Non-blocking nature of execution.  
  Improves performance and responsiveness.  
  Widely used in modern web applications.

---

## Event Loop

![Internals of Asynchronous Javascript](event_loop.png)

## How JavaScript Handles Asynchronous Code

- **Call Stack**  
  The call stack is where functions are executed in the order they’re called.  
  In synchronous operations, each function is added to the stack and executed before moving to the next.

- **Web APIs (in Browsers)**  
  Functions like `setTimeout`, HTTP requests, and event listeners are handled by Web APIs in the browser.  
  They manage the timing without blocking the main call stack.

- **Callback Queue**  
  Once the Web API has finished its job (like waiting for the timeout),  
  it pushes the callback function (like the one in `setTimeout`) to the callback queue.

- **Event Loop**  
  The event loop continuously checks the call stack.  
  If it’s empty, it pushes the functions from the callback queue onto the stack for execution.  

---

## XMLHttpRequest

- **JavaScript object** that lets web pages send/receive data without reloading.
- First introduced by Microsoft (IE) in early 2000s.
- Core of early dynamic web apps.

![Querying with XMLHttpRequest](XMLHttpRequest.png)

---

## AJAX

- **Made of:** JavaScript + XMLHttpRequest (or later fetch) + HTML/DOM + CSS + (optionally) XML/JSON.
- AJAX introduced a pattern for combining:
- HTML/CSS for layout
- JavaScript for logic
- XHR for data transfer
-AJAX popularized patterns that led to development of modern frameworks ( React, Vue, and Angular)

---

## Example AJAX Snipper

![AJAX](ajax.png)

---

---

## Jquery

- **Why it was popular:** 
- Simplified DOM manipulation and event handling.
- Provided a unified API across all browsers (when cross-browser issues were huge).
- Simplified AJAX requests with cleaner syntax.

---

## Example AJAX Snipper

![AJAX exmaple with jquery](ajax_jquery.png)

---